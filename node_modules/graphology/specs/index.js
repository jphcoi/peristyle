'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = specs;

var _instantiation = require('./instantiation');

var _instantiation2 = _interopRequireDefault(_instantiation);

var _properties = require('./properties');

var _properties2 = _interopRequireDefault(_properties);

var _read = require('./read');

var _read2 = _interopRequireDefault(_read);

var _mutation = require('./mutation');

var _mutation2 = _interopRequireDefault(_mutation);

var _attributes = require('./attributes');

var _attributes2 = _interopRequireDefault(_attributes);

var _iteration = require('./iteration');

var _iteration2 = _interopRequireDefault(_iteration);

var _serialization = require('./serialization');

var _serialization2 = _interopRequireDefault(_serialization);

var _events = require('./events');

var _events2 = _interopRequireDefault(_events);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _known = require('./known');

var _known2 = _interopRequireDefault(_known);

var _misc = require('./misc');

var _misc2 = _interopRequireDefault(_misc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var createErrorChecker = function createErrorChecker(name) {
  return function () {
    return function (error) {
      return error && error.name === name;
    };
  };
};

/**
 * Returning the unit tests to run.
 *
 * @param  {string} path - Path to the implementation (should be absolute).
 * @return {object}      - The tests to run with Mocha.
 */
/**
 * Graphology Specs
 * =================
 *
 * Unit tests factory taking the Graph object implementation.
 */
function specs(Graph, implementation) {

  var errors = [['invalid', 'InvalidArgumentsGraphError'], ['notFound', 'NotFoundGraphError'], ['usage', 'UsageGraphError']];

  // Building error checkers
  var errorCheckers = {};

  // Convenience helpers
  Graph.prototype.addNodesFrom = function (nodes) {
    var _this = this;

    nodes.forEach(function (node) {
      return _this.addNode(node);
    });
  };

  errors.forEach(function (_ref) {
    var fn = _ref[0],
        name = _ref[1];
    return errorCheckers[fn] = createErrorChecker(name);
  });

  var tests = {
    'Basic': {
      'Instantiation': (0, _instantiation2.default)(Graph, implementation, errorCheckers),
      'Properties': (0, _properties2.default)(Graph, errorCheckers),
      'Mutation': (0, _mutation2.default)(Graph, errorCheckers),
      'Read': (0, _read2.default)(Graph, errorCheckers),
      'Attributes': (0, _attributes2.default)(Graph, errorCheckers),
      'Iteration': (0, _iteration2.default)(Graph, errorCheckers),
      'Serialization': (0, _serialization2.default)(Graph, errorCheckers),
      'Events': (0, _events2.default)(Graph),
      'Utils': (0, _utils2.default)(Graph),
      'Known Methods': (0, _known2.default)(Graph, errorCheckers),
      'Miscellaneous': (0, _misc2.default)(Graph)
    }
  };

  return tests;
}