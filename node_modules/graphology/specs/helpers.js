'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.capitalize = capitalize;
exports.deepMerge = deepMerge;
exports.sameMembers = sameMembers;
exports.spy = spy;
/**
 * Graphology Specs Helpers
 * =========================
 *
 * Miscellaneous helpers to test more easily.
 */

/**
 * Capitalize function.
 */
function capitalize(string) {
  return string[0].toUpperCase() + string.slice(1);
}

/**
 * Simplistic deep merger function.
 */
function deepMerge() {
  for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {
    objects[_key] = arguments[_key];
  }

  var o = objects[0];

  var t = void 0,
      i = void 0,
      l = void 0,
      k = void 0;

  for (i = 1, l = objects.length; i < l; i++) {
    t = objects[i];

    for (k in t) {
      if (_typeof(t[k]) === 'object') {
        o[k] = deepMerge(o[k] || {}, t[k]);
      } else {
        o[k] = t[k];
      }
    }
  }

  return o;
}

/**
 * Checking that two arrays have the same members.
 */
function sameMembers(a1, a2) {
  if (a1.length !== a2.length) return false;

  var set = new Set(a1);

  for (var i = 0, l = a2.length; i < l; i++) {
    if (!set.has(a2[i])) return false;
  }

  return true;
}

/**
 * Function spying on the execution of the provided function to ease some
 * tests, notably related to event handling.
 *
 * @param {function} target - Target function.
 * @param {function}        - The spy.
 */
function spy(target) {
  var fn = function fn() {
    fn.called = true;
    fn.times++;

    if (typeof target === 'function') return target.apply(null, arguments);
  };

  fn.called = false;
  fn.times = 0;

  return fn;
}