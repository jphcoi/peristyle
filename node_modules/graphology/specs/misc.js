'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = misc;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function misc(Graph) {
  return {
    'Structure': {
      'a simple mixed graph can have A->B, B->A & A<->B': function aSimpleMixedGraphCanHaveABBAAB() {
        var graph = new Graph();
        graph.addNodesFrom(['Audrey', 'Benjamin']);

        _assert2.default.doesNotThrow(function () {
          graph.addEdge('Audrey', 'Benjamin');
          graph.addEdge('Benjamin', 'Audrey');
          graph.addUndirectedEdge('Benjamin', 'Audrey');
        });
      },

      'deleting the last edge between A & B should correctly clear neighbor index.': function deletingTheLastEdgeBetweenABShouldCorrectlyClearNeighborIndex() {
        var graph = new Graph({ multi: true });
        graph.addNode('A');
        graph.addNode('B');

        graph.addEdge('A', 'B');
        graph.addEdge('A', 'B');

        graph.forEachEdge('A', function (edge) {
          return graph.dropEdge(edge);
        });

        _assert2.default.deepEqual(graph.neighbors('A'), []);
        _assert2.default.deepEqual(graph.neighbors('B'), []);
      }
    },

    'Key coercion': {
      'keys should be correctly coerced to strings.': function keysShouldBeCorrectlyCoercedToStrings() {
        var graph = new Graph();
        graph.addNode(1);
        graph.addNode('2');

        _assert2.default.strictEqual(graph.hasNode(1), true);
        _assert2.default.strictEqual(graph.hasNode('1'), true);
        _assert2.default.strictEqual(graph.hasNode(2), true);
        _assert2.default.strictEqual(graph.hasNode('2'), true);

        graph.addEdgeWithKey(3, 1, 2);

        _assert2.default.strictEqual(graph.hasEdge(3), true);
        _assert2.default.strictEqual(graph.hasEdge('3'), true);
      }
    }
  };
} /**
   * Graphology Misc Specs
   * ======================
   *
   * Testing the miscellaneous things about the graph.
   */