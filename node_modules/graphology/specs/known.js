'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = knownMethods;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function knownMethods(Graph) {
  return {
    '#.toJSON': {
      'it should return the serialized graph.': function itShouldReturnTheSerializedGraph() {
        var graph = new Graph({ multi: true });
        graph.addNodesFrom(['John', 'Jack', 'Martha']);
        graph.setNodeAttribute('John', 'age', 34);
        graph.addEdgeWithKey('J->J•1', 'John', 'Jack');
        graph.addEdgeWithKey('J->J•2', 'John', 'Jack', { weight: 2 });
        graph.addEdgeWithKey('J->J•3', 'John', 'Jack');
        graph.addUndirectedEdgeWithKey('J<->J•1', 'John', 'Jack');
        graph.addUndirectedEdgeWithKey('J<->J•2', 'John', 'Jack', { weight: 3 });

        _assert2.default.deepEqual(graph.toJSON(), graph.export());
      }
    },

    '#.toString': {

      'it should return a useful string.': function itShouldReturnAUsefulString() {
        var graph = new Graph();

        _assert2.default.strictEqual(graph.toString(), 'Graph<0 nodes, 0 edges>');
      },

      'it should handle pluralization correctly.': function itShouldHandlePluralizationCorrectly() {
        var graph = new Graph();
        graph.addNode('John');

        _assert2.default.strictEqual(graph.toString(), 'Graph<1 node, 0 edges>');
      },

      'it should pretty print the numbers.': function itShouldPrettyPrintTheNumbers() {
        var graph = new Graph();

        for (var i = 0; i < 1000; i++) {
          graph.addNode(i);
        }_assert2.default.strictEqual(graph.toString(), 'Graph<1,000 nodes, 0 edges>');
      }
    }
  };
} /**
   * Graphology Known Methods Specs
   * ===============================
   *
   * Testing the known methods of the graph.
   */