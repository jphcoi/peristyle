'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = events;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Graphology Events Specs
 * ========================
 *
 * Testing the graph's events.
 */
var VALID_TYPES = new Set(['set', 'merge', 'replace', 'remove']);

function events(Graph) {
  return {
    'nodeAdded': {
      'it should fire when a node is added.': function itShouldFireWhenANodeIsAdded() {
        var graph = new Graph();

        var handler = (0, _helpers.spy)(function (data) {
          _assert2.default.strictEqual(data.key, 'John');
          _assert2.default.deepEqual(data.attributes, { age: 34 });
        });

        graph.on('nodeAdded', handler);

        graph.addNode('John', { age: 34 });

        (0, _assert2.default)(handler.called);
      }
    },

    'edgeAdded': {
      'it should fire when an edge is added.': function itShouldFireWhenAnEdgeIsAdded() {
        var graph = new Graph();

        var handler = (0, _helpers.spy)(function (data) {
          _assert2.default.strictEqual(data.key, 'J->T');
          _assert2.default.deepEqual(data.attributes, { weight: 1 });
          _assert2.default.strictEqual(data.source, 'John');
          _assert2.default.strictEqual(data.target, 'Thomas');
          _assert2.default.strictEqual(data.undirected, false);
        });

        graph.on('edgeAdded', handler);

        graph.addNodesFrom(['John', 'Thomas']);
        graph.addEdgeWithKey('J->T', 'John', 'Thomas', { weight: 1 });

        (0, _assert2.default)(handler.called);
      }
    },

    'nodeDropped': {
      'it should fire when a node is dropped.': function itShouldFireWhenANodeIsDropped() {
        var graph = new Graph();

        var handler = (0, _helpers.spy)(function (data) {
          _assert2.default.strictEqual(data.key, 'John');
          _assert2.default.deepEqual(data.attributes, { age: 34 });
        });

        graph.on('nodeDropped', handler);

        graph.addNode('John', { age: 34 });
        graph.dropNode('John');

        (0, _assert2.default)(handler.called);
      }
    },

    'edgeDropped': {
      'it should fire when an edge is added.': function itShouldFireWhenAnEdgeIsAdded() {
        var graph = new Graph();

        var handler = (0, _helpers.spy)(function (data) {
          _assert2.default.strictEqual(data.key, 'J->T');
          _assert2.default.deepEqual(data.attributes, { weight: 1 });
          _assert2.default.strictEqual(data.source, 'John');
          _assert2.default.strictEqual(data.target, 'Thomas');
          _assert2.default.strictEqual(data.undirected, false);
        });

        graph.on('edgeDropped', handler);

        graph.addNodesFrom(['John', 'Thomas']);
        graph.addEdgeWithKey('J->T', 'John', 'Thomas', { weight: 1 });
        graph.dropEdge('J->T');

        (0, _assert2.default)(handler.called);
      }
    },

    'cleared': {
      'it should fire when the graph is cleared.': function itShouldFireWhenTheGraphIsCleared() {
        var graph = new Graph();

        var handler = (0, _helpers.spy)();

        graph.on('cleared', handler);

        graph.clear();

        (0, _assert2.default)(handler.called);
      }
    },

    'attributesUpdated': {
      'it should fire when a graph attribute is updated.': function itShouldFireWhenAGraphAttributeIsUpdated() {
        var graph = new Graph();

        var handler = (0, _helpers.spy)(function (payload) {
          var type = payload.type,
              meta = payload.meta;


          (0, _assert2.default)(VALID_TYPES.has(type));

          if (type === 'set') {
            _assert2.default.strictEqual(meta.name, 'name');
            _assert2.default.strictEqual(meta.value, 'Awesome graph');
          } else if (type === 'replace') {
            _assert2.default.deepEqual(meta.before, { name: 'Awesome graph' });
            _assert2.default.deepEqual(meta.after, { name: 'Shitty graph' });
          } else if (type === 'remove') {
            _assert2.default.strictEqual(meta.name, 'name');
          } else {
            _assert2.default.deepEqual(meta.data, { name: 'Shitty graph', author: 'John' });
          }
        });

        graph.on('attributesUpdated', handler);

        graph.setAttribute('name', 'Awesome graph');
        graph.replaceAttributes({ name: 'Shitty graph' });
        graph.mergeAttributes({ author: 'John' });
        graph.removeAttribute('name');

        _assert2.default.strictEqual(handler.times, 4);
      }
    },

    'nodeAttributesUpdated': {
      'it should fire when a node is updated.': function itShouldFireWhenANodeIsUpdated() {
        var graph = new Graph();

        var handler = (0, _helpers.spy)(function (payload) {
          var key = payload.key,
              type = payload.type,
              meta = payload.meta;


          _assert2.default.strictEqual(key, 'John');

          (0, _assert2.default)(VALID_TYPES.has(type));

          if (type === 'set') {
            _assert2.default.strictEqual(meta.name, 'age');
            _assert2.default.strictEqual(meta.value, 34);
          } else if (type === 'replace') {
            _assert2.default.deepEqual(meta.before, { age: 34 });
            _assert2.default.deepEqual(meta.after, { age: 56 });
          } else if (type === 'remove') {
            _assert2.default.strictEqual(meta.name, 'eyes');
          } else {
            _assert2.default.deepEqual(meta.data, { eyes: 'blue' });
          }
        });

        graph.on('nodeAttributesUpdated', handler);

        graph.addNode('John');
        graph.setNodeAttribute('John', 'age', 34);
        graph.replaceNodeAttributes('John', { age: 56 });
        graph.mergeNodeAttributes('John', { eyes: 'blue' });
        graph.removeNodeAttribute('John', 'eyes');

        _assert2.default.strictEqual(handler.times, 4);
      }
    },

    'edgeAttributesUpdated': {
      'it should fire when a node is updated.': function itShouldFireWhenANodeIsUpdated() {
        var graph = new Graph();

        var handler = (0, _helpers.spy)(function (payload) {
          var key = payload.key,
              type = payload.type,
              meta = payload.meta;


          _assert2.default.strictEqual(key, 'J->T');

          (0, _assert2.default)(VALID_TYPES.has(type));

          if (type === 'set') {
            _assert2.default.strictEqual(meta.name, 'weight');
            _assert2.default.strictEqual(meta.value, 34);
          } else if (type === 'replace') {
            _assert2.default.deepEqual(meta.before, { weight: 34 });
            _assert2.default.deepEqual(meta.after, { weight: 56 });
          } else if (type === 'remove') {
            _assert2.default.strictEqual(meta.name, 'type');
          } else {
            _assert2.default.deepEqual(meta.data, { type: 'KNOWS' });
          }
        });

        graph.on('edgeAttributesUpdated', handler);

        graph.addNodesFrom(['John', 'Thomas']);
        graph.addEdgeWithKey('J->T', 'John', 'Thomas');
        graph.setEdgeAttribute('J->T', 'weight', 34);
        graph.replaceEdgeAttributes('J->T', { weight: 56 });
        graph.mergeEdgeAttributes('J->T', { type: 'KNOWS' });
        graph.removeEdgeAttribute('J->T', 'type');

        _assert2.default.strictEqual(handler.times, 4);
      }
    }
  };
}